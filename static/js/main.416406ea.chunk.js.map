{"version":3,"sources":["Components/Nav.js","Components/Jumbotron.js","Components/Footer.js","Components/Grid.js","Components/Image.js","image/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","message","score","topScore","Jumbotron","class","Footer","Container","fluid","children","Row","styles","imageStyle","height","width","margin","Image","src","image","style","alt","id","onClick","clickCount","images","imgUrl","console","log","App","state","gameOver","setState","forEach","img","count","find","o","i","sort","Math","random","this","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.416406ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css'\r\n\r\nconst Nav = (props) => {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">React Clicky Game</a>\r\n                    <h4 className=\"message animated infinite pulse\">{props.message}</h4>\r\n                    <h4 className=\"scores\">Score: {props.score} | Top Score: {props.topScore}</h4>\r\n            </nav>            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './index.css'\r\n\r\nconst Jumbotron = () => {\r\n    return (\r\n        <div className=\"jumbotron text-center\">\r\n            <h1 class=\"display-4\">Clicky-Game!</h1>\r\n            <p class=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './index.css'\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <nav class=\"navbar sticky-bottom navbar-dark bg-dark\">\r\n                <a class=\"navbar-brand\" href=\"#\">React Clicky Game</a>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './index.css'\r\n\r\nexport const Container = ({ fluid, children }) => {\r\n    return (\r\n        <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>\r\n    );\r\n};\r\n\r\nexport const Row = ({ fluid, children }) => {\r\n    return (\r\n        <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>\r\n    );\r\n};\r\n\r\nexport const Column = ({children}) => {\r\n    return (\r\n        <div className=\"col-sm text-center\">{children}</div>\r\n    );\r\n};","import React from 'react';\r\nimport './index.css'\r\n\r\nconst styles = {\r\n    imageStyle: {\r\n        height: 200,\r\n        width: 200,\r\n        margin: 15 \r\n    }\r\n\r\n}\r\n\r\n\r\nconst Image = (props) => {\r\n    return (\r\n        <div className=\"animated fadeInLeft delay-1s\">\r\n            <img src={props.image} style={styles.imageStyle} alt={props.alt} id={props.id} className=\"img-thumbnail\" onClick ={() => props.clickCount(props.id)}></img>          \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Image;\r\n\r\n","const images = [\r\n{   \r\n    id: 1,\r\n    alt: \"one\",\r\n    imgUrl: \"./images/placeholder2.jpg\"\r\n}, \r\n{\r\n    id: 2,\r\n    alt: \"two\",\r\n    imgUrl: \"./images/placeholder3.jpg\" \r\n}, \r\n{   \r\n    id: 3,\r\n    alt: \"three\",\r\n    imgUrl: \"./images/placeholder4.jpg\"\r\n},\r\n{\r\n    id: 4,\r\n    alt: \"four\",\r\n    imgUrl: \"./images/placeholder14.jpg\"\r\n},\r\n{\r\n    id: 5,\r\n    alt: \"five\",\r\n    imgUrl: \"./images/placeholder6.jpg\"\r\n},\r\n{\r\n    id: 6,\r\n    alt: \"six\",\r\n    imgUrl: \"./images/placeholder7.jpg\"\r\n},\r\n{\r\n    id: 7,\r\n    alt: \"seven\",\r\n    imgUrl: \"./images/placeholder8.jpg\"\r\n},\r\n{\r\n    id: 8,\r\n    alt: \"eight\",\r\n    imgUrl: \"./images/placeholder9.jpg\"\r\n},\r\n{\r\n    id: 9,\r\n    alt: \"nine\",\r\n    imgUrl: \"./images/placeholder10.jpg\"\r\n},\r\n{\r\n    id: 10,\r\n    alt: \"ten\",\r\n    imgUrl: \"./images/placeholder11.jpg\"\r\n},\r\n{\r\n    id: 11,\r\n    alt: \"eleven\",\r\n    imgUrl: \"./images/placeholder12.jpg\"\r\n},\r\n{\r\n    id: 12,\r\n    alt:  \"twelve\",\r\n    imgUrl: \"./images/placeholder13.jpg\"\r\n},\r\n]\r\n\r\nexport default images\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav'\nimport Jumbotron from './Components/Jumbotron'\nimport Footer from './Components/Footer'\nimport { Column, Row, Container } from './Components/Grid';\nimport Image from './Components/Image'\nimport images from './image'\n\nconsole.log(images)\n\n\nclass App extends React.Component{\n  state = {\n    images,\n    message: \"Click any image to start!\",\n    score: 0,\n    topScore: 0\n    };\n  \n    gameOver = () => {\n      if (this.state.score > this.state.topScore) {\n        this.setState({topScore: this.state.score});\n      }\n      this.state.images.forEach(img => {\n        img.count = 0;\n      });\n      this.setState({score: 0, message:\"You already clicked that!?!\"});\n      return true;\n    }\n  \n    clickCount = id => {\n      this.state.images.find((o, i) => {\n        if (o.id === id) {\n          if(images[i].count === 0){\n            images[i].count = images[i].count + 1;\n            this.setState({score : this.state.score + 1, message:\"Keep it going!\"});\n            this.state.images.sort(() => Math.random() - 0.5)\n            return true; \n          } else {\n            this.gameOver();\n          }\n        }\n      });\n    }\n\n\nrender() {\n  return (\n    <div>\n      <Nav message={this.state.message} score={this.state.score} topScore={this.state.topScore} />\n        <Jumbotron />\n          <Container>\n            <Row>\n              {this.state.images.map(img => (\n                <Image id={img.id} alt={img.alt} image={img.imgUrl} clickCount={this.clickCount} />\n              ))}         \n            </Row>\n          </Container>\n        <Footer />\n    </div>\n  );\n}\n\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}